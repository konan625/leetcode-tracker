const express = require("express")
const bcrypt = require("bcryptjs")
const jwt = require('jsonwebtoken')
const { check, validationResult } = require("express-validator")
const User = require("../models/User")

const router = express.Router() //this is like a registration desk, it dedicates space to handle user registration requests.


//User registraction Sign up, defining the sign up route
router.post( //post is the type of request used for sending data to the server
    "/signup", //this is the url path where users submit their registration details
    [
        check("name", "Name is required").not().isEmpty(),
        check("email", "Please include a valid email").isEmail(),
        check("password", "Password must be at least 6 characters").isLength({ min: 6 }),
        check("leetcodeUsername", "Leetcode username is required").not().isEmpty()
    ],
    async (req, res) => { //async marks a function as "can pause and wait"
        const errors = validationResult(req); // this gather all teh error from the baove check() rules
        if (!errors.isEmpty()) return res.status(400).json({ errors: errors.array() }); // if any error os there, return that in form of json

        const { name, email, password,leetcodeUsername } = req.body;

        try {
            let user = await User.findOne({ email });
            if (user) return res.status(400).json({ message: "user aleady exist" });

            user = new User({ name, email, password,leetcodeUsername }); //making a new user
            await user.save(); //await says "pause here untill this finishes"

            //now lets give a jwt token to that user
            const token = jwt.sign({ userId: user._id }, process.env.JWT_SECRET, { expiresIn: "7d" });
            //here user._id is autogenerated by mongodb, jwt_secret is a special password only my server know that is stored in .env file, expressIn is the expiration data that is 7 days

            res.status(201).json({ success: true, token, userId: user._id });
        } catch (error) {
            res.status(500).json({ sucess: false, error: error.message });
        }
    }
);

// user login 
router.post(
    "/login",
    [
        check("email", "Please include a valid email").isEmail(),
        check("password", "Password is required").exists(),
    ],
    async (req, res) => {
        const errors = validationResult(req);
        if (!errors.isEmpty()) return res.status(400).json({ errors: errors.array() });

        const { email, password } = req.body;

        try {
            let user = await User.findOne({ email });
            if (!user) return res.status(400).json({ message: "Invalid Credentials" });

            const isMatch = await bcrypt.compare(password, user.password);
            console.log("Entered Password:", password);
            console.log("Stored Hashed Password:", user.password);
            console.log(isMatch)
            if (!isMatch) return res.status(400).json({ message: "Invalid Password" });

            const token = jwt.sign({ userId: user._id }, process.env.JWT_SECRET, { expiresIn: "7d" });

            res.json({ sucess: true, token, userId: user._id });
        } catch (error) {
            res.status(500).json({ sucess: false, error: error.message });
        }
    }
);

module.exports = router;